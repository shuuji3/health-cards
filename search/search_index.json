{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u3053\u306e\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066 \u00b6 \u3053\u308c\u306f\u3001 SMART Health Cards Framework \u306e\u65e5\u672c\u8a9e\u7ffb\u8a33\u3067\u3059\u3002SMART Health Cards\u306e\u4ed5\u69d8\u3092\u65e5\u672c\u8a9e\u3067\u7406\u89e3\u3059\u308b\u52a9\u3051\u3068\u306a\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\u6700\u65b0\u306e\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6982\u8981 \u00b6 \u6280\u8853\u7684\u3067\u306a\u3044\u6982\u8981\u306b\u3064\u3044\u3066\u63a2\u3057\u3066\u3044\u307e\u3059\u304b\uff1f \u00b6 SMART Health Cards public landing page \u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u6280\u8853\u4ed5\u69d8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u30b9\u30c6\u30fc\u30bf\u30b9 \u00b6 \u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u4f01\u696d\u3001\u7814\u7a76\u6240\u3001\u85ac\u5c40\u3001\u96fb\u5b50\u7684\u306a\u5065\u5eb7\u8a18\u9332\u3001\u304a\u3088\u3073\u514d\u75ab\u60c5\u5831\u30b7\u30b9\u30c6\u30e0\u306e\u30d9\u30f3\u30c0\u30fc\u304b\u3089\u306e\u610f\u898b\u3092\u307e\u3068\u3081\u3066\u4f5c\u6210\u3055\u308c\u305f\u6700\u521d\u306e\u5b89\u5b9a\u7248\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u3059\u3002 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 \u00b6 \u5909\u66f4\u3092\u63d0\u6848\u3059\u308b\u306b\u306f\u3001GitHub Issues \u3092\u4f7f\u3046\u304b\u3001 Pull Request \u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u306f\u3058\u3081\u306b \u00b6 \u3053\u306e\u5b9f\u88c5\u30ac\u30a4\u30c9\u3067\u306f\u3001\u300cHealth Cards\u300d\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u77ed\u671f\u7684\u306a\u76ee\u6a19\u306f\u3001\u6d88\u8cbb\u8005\u304cCOVID-19\u30ef\u30af\u30c1\u30f3\u3084\u691c\u67fb\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u3057\u3001 \u3053\u308c\u3089\u306e\u7d50\u679c\u3092\u4ed6\u306e\u30d1\u30fc\u30c6\u30a3\u306b\u691c\u8a3c\u53ef\u80fd\u306a\u65b9\u6cd5\u3067\u63d0\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059 \u3002\u4e3b\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u306f\u3001\u8077\u5834\u3078\u306e\u5fa9\u5e30\u3084\u65c5\u884c\u306e\u305f\u3081\u306b\u7279\u5b9a\u6642\u70b9\u3067\u306e\u611f\u67d3\u72b6\u6cc1\u3092\u4f1d\u3048\u308b\u3053\u3068\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u514d\u75ab\u72b6\u614b\u3084\u305d\u306e\u4ed6\u306e\u5065\u5eb7\u72b6\u614b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u79c1\u305f\u3061\u306f\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u3092\u4fdd\u8a3c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001Health Cards\u306f\u7d44\u7e54\u3084\u7ba1\u8f44\u533a\u57df\u306e\u5883\u754c\u3092\u8d85\u3048\u3066\u6a5f\u80fd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u56fd\u969b\u7684\u306a\u6a19\u6e96\u3068\u5206\u6563\u578b\u306e\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3092\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u3002 \u6982\u5ff5\u30e2\u30c7\u30eb \u00b6 Issuer \uff08\u305f\u3068\u3048\u3070\u3001\u7814\u7a76\u6240\u3001\u85ac\u5c40\u3001\u75c5\u9662\u3001EHR\u3001\u516c\u7684\u306a\u5065\u5eb7\u90e8\u9580\u3001\u514d\u75ab\u60c5\u5831\u30b7\u30b9\u30c6\u30e0\u306a\u3069\uff09\u306f\u3001\u691c\u8a3c\u53ef\u80fd\u306a\u8a3c\u660e\u66f8\u3092\u767a\u884c\u3057\u307e\u3059\u3002 Holder \u306f\u3001\u8a3c\u660e\u66f8\u3092\u4fdd\u7ba1\u3057\u3001\u8a3c\u660e\u66f8\u3092\u81ea\u7531\u306b\u63d0\u793a\u3057\u307e\u3059\u3002 Verifier \u306f\u3001Holder\u304b\u3089\u8a3c\u660e\u66f8\u3092\u53d7\u3051\u53d6\u308a\u3001\u9069\u5207\u306b\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002 \u8a2d\u8a08\u306e\u76ee\u6a19 \u00b6 \u95a2\u9023\u3059\u308b\u533b\u7642\u30c7\u30fc\u30bf\u3092\u30e6\u30fc\u30b6\u30fc\u304c\u53d7\u3051\u53d6\u3063\u3066\u63d0\u793a\u3059\u308b \u30a8\u30f3\u30c9 \u30c8\u30a5 \u30a8\u30f3\u30c9\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc \u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068 \u30aa\u30fc\u30d7\u30f3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9 \u3092\u4f7f\u7528\u3057\u305f\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068 \u5f37\u529b\u306a \u6697\u53f7\u5b66\u7684\u7f72\u540d \u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068 \u7279\u5b9a\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306e\u305f\u3081\u306b \u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u3092\u4fdd\u8b77\u3059\u308b \u30c7\u30fc\u30bf\u8868\u73fe\u3092\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068 \u5c0f\u3055\u304f\u306f\u3058\u3081\u3066\u3001\u5927\u304d\u304f\u8003\u3048\u308b \u00b6 \u79c1\u305f\u3061\u306f\u3001\u30d8\u30eb\u30b9\u30b1\u30a2\u306e\u69d8\u3005\u306a\u5834\u6240\u3067\u5229\u7528\u3067\u304d\u308b\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u30d6\u30ed\u30c3\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001Health Cards\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\u30b3\u30a2\u3068\u306a\u308b\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u30d6\u30ed\u30c3\u30af\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u79c1\u305f\u3061\u306f\u30c7\u30fc\u30bf\u3092\u610f\u5473\u306e\u3042\u308b\u307e\u3068\u307e\u308a\u306b\u96c6\u7d04\u3057\u3001issuer\u306f\u7f72\u540d\u3057\u3001\u6d88\u8cbb\u8005\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4fdd\u7ba1\u30fb\u63d0\u793a\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5e83\u7bc4\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u306f\u3001\u6700\u7d42\u7684\u306b\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u53ef\u80fd\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u5b66\u6821\u3084\u96c7\u7528\u8005\u3001\u65c5\u884c\u306e\u305f\u3081\u306b\u5171\u6709\u3067\u304d\u308b\u3001\u514d\u75ab\u8a18\u9332\u3092\u7ba1\u7406\u3059\u308b \u691c\u8a3c\u53ef\u80fd\u306a\u5065\u5eb7\u5c65\u6b74\u306e\u30c7\u30fc\u30bf\u3092\u81e8\u5e8a\u7814\u7a76\u3067\u5171\u6709\u3059\u308b \u516c\u8846\u885b\u751f\u6a5f\u95a2\u3068\u81ea\u4e3b\u7684\u306a\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b \u533b\u7642\u63d0\u4f9b\u8005\u3068\u30a2\u30f3\u30b1\u30fc\u30c8\u306e\u56de\u7b54\u3092\u5171\u6709\u3059\u308b \u3053\u306e\u30b9\u30b3\u30fc\u30d7\u306f\u5e83\u7bc4\u3067\u3059\u304c\u3001\u79c1\u305f\u3061\u306b\u5fc5\u8981\u306a \u6210\u529f\u306e\u77ed\u671f\u7684\u306a\u5b9a\u7fa9 \u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u3081\u3089\u308c\u307e\u3059\u3002 COVID-19\u306e\u72b6\u614b\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u300cHealth Wallet\u300d\u5185\u306e\u300cHealth Cards\u300d\u3092\u63d0\u793a\u3059\u308b\u3053\u3068 \u305d\u308c\u305e\u308c\u306e\u5f79\u5272\uff08issuer\u3001holder\u3001\u30a2\u30d7\u30ea\uff09\u306f\u3001\u95a2\u9023\u3059\u308b\u4fe1\u983c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u7f72\u540d\u3059\u308b\u9650\u308a\u3001\u4ee5\u4e0b\u306e\u30aa\u30fc\u30d7\u30f3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u306b\u5f93\u3046\u3053\u3068\u3067\u3069\u3093\u306a\u7d44\u7e54\u3067\u3082\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068 \u30e6\u30fc\u30b6\u30fc\u30a8\u30af\u30b9\u30da\u30ea\u30a8\u30f3\u30b9\u3068\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc \u00b6 \u30e6\u30fc\u30b6\u30fc \u306f\u3001Health Card\u3092Issuer\u304b\u3089 \u53d7\u3051\u53d6\u308a\u307e\u3059 \u3002Health Card\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u624b\u6bb5\u3067\u53d6\u5f97\u3067\u304d\u308b\u3001\u7f72\u540d\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u3067\u3059\u3002 issuer\u306f\u3001Health Card\u3092QR\u30b3\u30fc\u30c9\u3092\u542b\u3080\u66f8\u985e\u307e\u305f\u306fPDF\u3067\u63d0\u4f9b\u3059\u308b\uff08\u5fc5\u8981\u306a\u624b\u6bb5\uff09 issuer\u306f\u3001Health Card\u3092 .smart-health-card \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u624b\u6bb5\u3092\u63d0\u4f9b\u3059\u308b\uff08\u5fc5\u8981\u306a\u624b\u6bb5\uff09 issuer hosts a Health Card for FHIR API access via a compatible Health Wallet application. This workflow includes a SMART on FHIR authorization step with an Issuer, where the user grants read access to any resources that will be present in Health Cards (e.g., Patient , Immunization , Observation , DiagnosticReport ) \u30e6\u30fc\u30b6\u30fc\u306bHealth Cards\u4e0a\u306b\u63d0\u793a\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u8aad\u307f\u53d6\u308a\u30a2\u30af\u30bb\u30b9\u3092\u4e0e\u3048\u308b \u30e6\u30fc\u30b6\u30fc \u306f\u3001\u66f8\u985e\u307e\u305f\u306f\u30c7\u30b8\u30bf\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066Health Card\u3092 \u4fdd\u5b58\u3057\u307e\u3059 \u3002 \u30e6\u30fc\u30b6\u30fc \u306f\u3001Health Card\u3092Verifier\u306b \u63d0\u793a\u3057\u307e\u3059 \u3002\u63d0\u793a\u65b9\u6cd5\u306b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u660e\u793a\u7684\u306a\u30aa\u30d7\u30c8\u30a4\u30f3\u3068\u627f\u8a8d\u304c\u3042\u308a\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001QR\u30b3\u30fc\u30c9\u306e\u63d0\u793a\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5171\u6709\u3001\u307e\u305f\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u4e0a\u306eSDK\u306e\u4f7f\u7528\uff08\u305f\u3068\u3048\u3070\u3001verifier\u304b\u3089holder\u3078\u306e\u30a2\u30d7\u30ea\u9593\u901a\u4fe1\u306e\u305f\u3081\uff09\u304c\u95a2\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u4fe1\u983c \u00b6 Anyone can issue Health Cards, and every verifier can make its own decision about which issuers to trust . A \"trust framework\" can help verifiers to externalize these decisions and drive toward more consistent practices. The SMART Health Cards IG is designed to operate independent of any trust framework, while allowing trust frameworks to be layered on top. We anticipate such frameworks will emerge to meet different jurisdictional and use case driven requirements. In all cases, verifiers can discover public keys associated with an issuer via /.well-known/jwks.json URLs. \u30d7\u30e9\u30a4\u30d0\u30b7\u30fc \u00b6 \u30c7\u30fc\u30bf\u306e\u6700\u5c0f\u5316 \u00b6 It is an explicit design goal to let the holder only disclose a minimum amount of information to a verifier. The information required to be disclosed is use-case dependent, and -- particularly in a healthcare setting -- it can be difficult for lay people to judge which data elements are necessary to be shared. The granularity of information disclosure will be at the level of an entire credential (i.e., a user can select \"which cards\" to share from a Health Wallet, and each card is shared wholesale). The credentials are designed to only include the minimum information necessary for a given use case. \u7d30\u7c92\u5ea6\u306e\u5171\u6709 \u00b6 Data holders should have full control over the data they choose to share for a particular use-case. Since Health Cards are signed by the issuer and cannot be altered later, it is important to ensure that Health Cards are created with granular sharing in mind. Therefore, issuers SHOULD only combine distinct data elements into a Health Card when a Health Card FHIR profile requires it. Additionally, Health Card FHIR Profiles SHOULD only include data that need to be conveyed together. (e.g., immunizations for different diseases should be kept separate. Immunizations and lab results should be kept separate.) \u5c06\u6765\u306e\u691c\u8a0e\u4e8b\u9805 \u00b6 If we identify optional data elements for a given use case, we might incorporate them into credentials by including a cryptographic hash of their values instead of embedding values directly. Longer term we can provide more granular options using techniques like zero-knowledge proofs, or by allowing a trusted intermediary to summarize results in a just-in-time fashion. \u30c7\u30fc\u30bf\u30e2\u30c7\u30eb \u00b6 This framework defines a general approach to representing demographic and clinical data in FHIR , outlined in Modeling Verifiable Credentials in FHIR . Specific use cases for Health Cards will define specific data profiles. COVID-19 Vaccination Credentials : See SMART Health Cards: Vaccination IG \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8a73\u7d30 \u00b6 \u6697\u53f7\u5b66\u7684\u30ad\u30fc\u306e\u751f\u6210\u3068\u89e3\u6c7a \u00b6 Health Cards Framework\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30ad\u30fc\u306e\u7a2e\u985e\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Elliptic Curve keys using the P-256 curve Health Cards \u3078\u306e\u7f72\u540d \u00b6 Issuers sign Health Card VCs (Verifiable Credentials) with a signing key (private key) Issuer publish the corresponding public key (public key) at /.well-known/jwks.json Wallets and Verifiers use the public key to verify Issuer signatures on Health Cards issuer\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u30ad\u30fc\u3092\u7279\u5b9a\u3059\u308b \u00b6 Each public key used to verify signatures is represented as a JSON Web Key (see RFC 7517 ): SHALL have \"kty\": \"EC\" , \"use\": \"sig\" , and \"alg\": \"ES256\" SHALL have \"kid\" equal to the base64url-encoded SHA-256 JWK Thumbprint of the key (see RFC7638 ) SHALL have \"crv\": \"P-256 , and \"x\" , \"y\" equal to the base64url-encoded values for the public Elliptic Curve point coordinates (see RFC7518 ) SHALL NOT have the Elliptic Curve private key parameter \"d\" If the issuer has an X.509 certificate for the public key, SHALL have \"x5c\" equal to an array of one or more base64-encoded (not base64url-encoded) DER representations of the public certificate or certificate chain (see RFC7517 ). The public key listed in the first certificate in the \"x5c\" array SHALL match the public key specified by the \"crv\" , \"x\" , and \"y\" parameters of the same JWK entry. If the issuer has more than one certificate for the same public key (e.g. participation in more than one trust community), then a separate JWK entry is used for each certificate with all JWK parameter values identical except \"x5c\" . Issuers SHALL publish their public keys as JSON Web Key Sets (see RFC7517 ), available at <<iss value from JWS>> + /.well-known/jwks.json , with Cross-Origin Resource Sharing (CORS) enabled, using TLS version 1.2 following the IETF BCP 195 recommendations or TLS version 1.3 (with any configuration). The URL at <<iss value from JWS>> SHALL use the https scheme and SHALL NOT include a trailing / . For example, https://smarthealth.cards/examples/issuer is a valid iss value ( https://smarthealth.cards/examples/issuer/ is not ). Signing keys in the .keys[] array can be identified by kid following the requirements above (i.e., by filtering on kty , use , and alg ). For example, the following is a fragment of a jwks.json file with one signing key: { \"keys\" :[ { \"kty\" : \"EC\" , \"kid\" : \"_IY9W2kRRFUigDfSB9r8jHgMRrT0w4p5KN93nGThdH8\" , \"use\" : \"sig\" , \"alg\" : \"ES256\" , \"crv\" : \"P-256\" , \"x\" : \"7xbC_9ZmFwKqOHpwX6-LnlhIh5SMIuNwl0PW1yVI_sk\" , \"y\" : \"7k2fdIRNDHdf93vL76wxdXEPtj_GiMTTyecm7EUUMQo\" , } ] } \u8a3c\u660e\u66f8 \u00b6 X.509 certificates can be used by issuers to indicate the issuer's participation in a PKI-based trust framework. If the Verifier supports PKI-based trust frameworks and the Health Card issuer includes the \"x5c\" parameter in matching JWK entries from the .keys[] array, the Verifier establishes that the issuer is trusted as follows: Verifier validates the leaf certificate's binding to the Health Card issuer by: matching the <<iss value from JWS>> to the value of a uniformResourceIdentifier entry in the certificate's Subject Alternative Name extension (see RFC5280 ), and verifying the signature in the Health Card using the public key in the certificate. Verifier constructs a valid certificate path of unexpired and unrevoked certificates to one of its trusted anchors (see RFC5280 ). \u30ad\u30fc\u306e\u7ba1\u7406 \u00b6 Issuers SHOULD generate new signing keys at least annually. When an issuer generates a new key to sign Health Cards, the public key SHALL be added to the issuer's JWK set in its jwks.json file. Retired private keys that are no longer used to sign Health Cards SHALL be destroyed. Older public key entries that are needed to validate previously signed Health Cards SHALL remain in the JWK set for as long as the corresponding Health Cards are clinically relevant. However, if a private signing key is compromised, then the issuer SHALL immediately remove the corresponding public key from the JWK set in its jwks.json file and request revocation of all X.509 certificates bound to that public key. Issuer\u304c\u7d50\u679c\u3092\u751f\u6210\u3059\u308b \u00b6 When the issuer is ready to generate a Health Card, the issuer creates a FHIR payload and packs it into a corresponding Health Card VC (or Health Card Set). sequenceDiagram participant Holder participant Issuer note over Holder, Issuer: Earlier... Issuer ->> Issuer: Generate Issuer's keys Issuer ->> Issuer: If Health Card data for holder already exist: re-generate VCs note over Issuer, Holder: Data Created Issuer ->> Issuer: Generate FHIR Representation Issuer ->> Issuer: Generate VC Representation Issuer ->> Issuer: Generate JWS Payload and sign note over Issuer, Holder: Later... Issuer ->> Holder: Holder receives Health Card Health Cards\u306fCompact Serialization JSON Web Signatures\uff08JWS\uff09\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u308b \u00b6 The VC structure (scaffold) is shown in the following example. The Health Cards framework serializes VCs using the compact JWS serialization, where the payload is a compressed set of JWT claims (see Appendix 3 of RFC7515 for an example using ECDSA P-256 SHA-256, as required by this specification). Specific encoding choices ensure compatibility with standard JWT claims, as described at https://www.w3.org/TR/vc-data-model/#jwt-encoding . The type , and credentialSubject properties are added to the vc claim of the JWT. The type values are defined in Credential Types ; the https://smarthealth.cards#health-card SHALL be present; other types SHOULD be included when they apply. Verifiers and other entities processing SMART Health Cards SHALL ignore any additional type elements they do not understand. The issuer property is represented by the registered JWT iss claim and the issuanceDate property is represented by the registered JWT nbf (\"not before\") claim (encoded as the number of seconds from 1970-01-01T00:00:00Z UTC, as specified by RFC 7519 ). Hence, the overall JWS payload matches the following structure (before it is minified and compressed ): { \"iss\" : \"<<Issuer URL>>\" , \"nbf\" : 1591037940 , \"vc\" : { \"type\" : [ \"https://smarthealth.cards#health-card\" , \"<<Additional Types>>\" , ], \"credentialSubject\" : { \"fhirVersion\" : \"<<FHIR Version, e.g. '4.0.1'>>\" , \"fhirBundle\" :{ \"resourceType\" : \"Bundle\" , \"type\" : \"collection\" , \"entry\" : [ \"<<FHIR Resource>>\" , \"<<FHIR Resource>>\" , \"...\" ] } } } } Health Cards\u306f\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044 \u00b6 To ensure that all Health Cards can be represented in QR codes, issuers SHALL ensure that the following constraints apply at the time of issuance: JWS Header header includes alg: \"ES256\" header includes zip: \"DEF\" header includes kid equal to the base64url-encoded SHA-256 JWK Thumbprint of the key (see RFC7638 ) JWS Payload payload is minified (i.e., all optional whitespace is stripped) payload is compressed with the DEFLATE (see RFC1951 ) algorithm before being signed (note, this should be \"raw\" DEFLATE compression, omitting any zlib or gz headers) payload .vc.credentialSubject.fhirBundle is created: without Resource.id elements without Resource.meta elements (or if present, .meta.security is included and no other fields are included) without DomainResource.text elements without CodeableConcept.text elements without Coding.display elements with Bundle.entry.fullUrl populated with short resource -scheme URIs (e.g., {\"fullUrl\": \"resource:0\"} ) with Reference.reference populated with short resource -scheme URIs (e.g., {\"patient\": {\"reference\": \"resource:0\"}} ) For details about how to embed Health Cards in a QR code, see below . User\u304cHealth Cards\u3092\u53d6\u5f97\u3059\u308b \u00b6 In this step, the user learns that a new Health Card is available (e.g., by receiving a text message or email notification, or by an in-wallet notification for FHIR-enabled issuers.) \u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u3088\u308b\u65b9\u6cd5 \u00b6 To facilitate this workflow, the issuer can include a link to help the user download the credentials directly, e.g., from a login-protected page in the Issuer's patient portal. The file SHALL be served with a .smart-health-card file extension and SHALL be provided with a MIME type of application/smart-health-card (e.g., web servers SHALL include Content-Type: application/smart-health-card as an HTTP Response containing a Health Card), so the Health Wallet app can be configured to recognize this extension and/or MIME type. Contents should be a JSON object containing an array of Verifiable Credential JWS strings: { \"verifiableCredential\" : [ \"<<Verifiable Credential as JWS>>\" , \"<<Verifiable Credential as JWS>>\" ] } QR\u30b3\u30fc\u30c9\u306b\u3088\u308b\u65b9\u6cd5\uff08\u5370\u5237\u307e\u305f\u306f\u30b9\u30ad\u30e3\u30f3\uff09 \u00b6 Alternatively, issuers can make any individual JWS inside a Health Card available embedded in a QR code (for instance, printed on a paper-based vaccination record or after-visit summary document). See details . Finally, the Health Wallet asks the user if they want to save any/all of the supplied credentials. FHIR $health-cards-issue Operation\u306b\u3088\u308b\u65b9\u6cd5 \u00b6 For a more seamless user experience when FHIR API connections are already in place, results may also be conveyed through a FHIR API $health-cards-issue operation defined here . For issuers that support SMART on FHIR access, the Health Wallet MAY request authorization with SMART on FHIR scopes (e.g., launch/patient patient/Immunization.read for an Immunization use case). This allows the Health Wallet to automatically request issuance of VCs, including requests for periodic updates. FHIR\u30b5\u30dd\u30fc\u30c8\u306e\u691c\u51fa A SMART on FHIR Server capable of issuing VCs according to this specification SHALL advertise its support by adding the health-cards capability to its /.well-known/smart-configuration JSON file. For example: { \"authorization_endpoint\" : \"https://ehr.example.com/auth/authorize\" , \"token_endpoint\" : \"https://ehr.example.com/auth/token\" , \"token_endpoint_auth_methods_supported\" : [ \"client_secret_basic\" ], \"scopes_supported\" : [ \"launch\" , \"launch/patient\" , \"patient/*.*\" , \"offline_access\" ], \"response_types_supported\" : [ \"code\" , \"code id_token\" , \"id_token\" , \"refresh_token\" ], \"capabilities\" : [ \"health-cards\" , \"launch-standalone\" , \"context-standalone-patient\" , \"client-confidential-symmetric\" ] } $health-cards-issue Operation A Health Wallet can POST /Patient/:id/$health-cards-issue to a FHIR-enabled issuer to request the generation of a specific type of Health Card. The body of the POST looks like: { \"resourceType\" : \"Parameters\" , \"parameter\" : [{ \"name\" : \"credentialType\" , \"valueUri\" : \"https://smarthealth.cards#covid19\" }] } The credentialType parameter is required. Multiple credentialType values in one request SHALL be interpreted as a request for the intersection of the requested types (logical AND). For example, a request containing credentialType values https://smarthealth.cards#covid19 and https://smarthealth.cards#immunization is a request for only those cards that are both COVID-19 cards and immunization cards (i.e., only those COVID-19 cards that are about immunizations). The following parameters are optional; clients MAY include them in a request, and servers MAY ignore them if present. includeIdentityClaim . By default, the issuer will decide which identity claims to include, based on profile-driven guidance. If the Health Wallet wants to fine-tune identity claims in the generated credentials, it can provide an explicit list of one or more includeIdentityClaim s, which will limit the claims included in the VC. For example, to request that only name be included: { \"resourceType\" : \"Parameters\" , \"parameter\" : [{ \"name\" : \"credentialType\" , \"valueUri\" : \"https://smarthealth.cards#covid19\" }, { \"name\" : \"includeIdentityClaim\" , \"valueString\" : \"Patient.name\" }] } _since . By default, the issuer will return Health Cards of any age. If the Health Wallet wants to request only cards pertaining to data since a specific point in time, it can provide a _since parameter with a valueDateTime (which is an ISO8601 string at the level of a year, month, day, or specific time of day using the extended time format; see FHIR dateTime datatype for details). For example, to request only COVID-19 data since March 2021: { \"resourceType\" : \"Parameters\" , \"parameter\" : [{ \"name\" : \"credentialType\" , \"valueUri\" : \"https://smarthealth.cards#covid19\" }, { \"name\" : \"_since\" , \"valueDateTime\" : \"2021-03\" }] } The response is a Parameters resource that includes one more more verifiableCredential values like: { \"resourceType\" : \"Parameters\" , \"parameter\" :[{ \"name\" : \"verifiableCredential\" , \"valueString\" : \"<<Health Card as JWS>>\" }] } If no results are available, a Parameters resource without any parameter is returned: { \"resourceType\" : \"Parameters\" } In the response, an optional repeating resourceLink parameter can capture the link between any number of hosted FHIR resources and their derived representations within the verifiable credential's .credentialSubject.fhirBundle , allowing the health wallet to explicitly understand these correspondences between bundledResource and hostedResource , without baking details about the hosted endpoint into the signed credential. The optional vcIndex value on a resourceLink can be used when a response contains more than one VC, to indicate which VC this resource link applies to. The vcIndex is a zero-based index of a verifiableCredential entry within the top-level parameter array. { \"resourceType\" : \"Parameters\" , \"parameter\" : [{ \"name\" : \"verifiableCredential\" , \"valueString\" : \"<<Health Card as JWS>>\" }, { \"name\" : \"resourceLink\" , \"part\" : [{ \"name\" : \"vcIndex\" , \"valueInteger\" : 0 }, { \"name\" : \"bundledResource\" , \"valueUri\" : \"resource:2\" }, { \"name\" : \"hostedResource\" , \"valueUri\" : \"https://fhir.example.org/Immunization/123\" }] }] } Health Cards\u3092Verifier\u306b\u63d0\u793a\u3059\u308b \u00b6 In this step, the verifier asks the user to share a COVID-19 result. A Health Card containing the result can be conveyed by presenting a QR code; by uploading a file; or by leveraging device-specific APIs. Over time, we will endeavor to standardize presentation workflows including device-specific patterns and web-based exchange. \u3059\u3079\u3066\u306eHealth Card\u306fQR\u30b3\u30fc\u30c9\u306b\u57cb\u3081\u8fbc\u3081\u308b \u00b6 Each JWS string that appears in the .verifiableCredential[] of a .smart-health-card file can be embedded in one or more QR codes. We aim to ensure that printed (or electronically displayed) codes are usable at physical dimensions of 40mmx40mm. This constraint allows us to use QR codes up to Version 22, at 105x105 modules. When embedding a JWS string in QR codes, the JWS string SHALL be encoded as Numerical Mode QR codes consisting of the digits 0-9 (see \"Encoding Chunks as QR codes\" ). Ensuring Health Cards can be presented as QR codes: Allows basic storage and sharing of Health Cards for users without a smartphone Allows smartphone-enabled users to print a usable backup Allows full Health Card contents to be shared with a verifier The following limitations apply when presenting Health Card as QR codes, rather than engaging in device-based workflows: Does not capture a digital record of a request for presentation Verifier cannot include requirements in-band Verifier cannot include purposes of use in-band Does not capture a digital record of the presentation Health Card JWS\u304b\u3089QR\u30b3\u30fc\u30c9\uff08\u307e\u305f\u306f\u8907\u6570\u306eQR\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\uff09\u3092\u751f\u6210\u3059\u308b \u00b6 \u30c1\u30e3\u30f3\u30af\u5316 \u00b6 Commonly, Health Cards will fit in a single V22 QR code. Any JWS longer than 1195 characters SHALL be split into \"chunks\" of length 1191 or smaller; each chunk SHALL be encoded as a separate QR code of V22 or lower, to ensure ease of scanning. Each chunk SHALL be numerically encoded and prefixed with an ordinal as well as the total number of chunks required to re-assemble the JWS, as described below. The QR code FAQ page details max JWS length restrictions at various error correction levels. To ensure the best user experience when producing and consuming multiple QR codes: Producers of QR codes SHOULD balance the sizes of chunks. For example, if a JWS is 1200 characters long, producers should create two ~600 character chunks rather than a 1191 character chunk and a 9 character chunk. Consumers of QR codes SHOULD allow for scanning the multiple QR codes in any order. Once the full set is scanned, the JWS can be assembled and validated. \u30c1\u30e3\u30f3\u30af\u3092QR\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b \u00b6 When printing or displaying a Health Card using QR codes, let \"N\" be the total number of chunks required, and let \"C\" be a variable indicating the index of the current chunk. Each chunk of the JWS string value SHALL be represented as a QR with two data segments: A segment encoded with bytes mode consisting of the fixed string shc:/ (registered as an IANA scheme ) plus (only if more than one chunk is required) decimal representation of \"C\" (e.g., 1 for the first chunk, 2 for the second chunk, and so on) plus the fixed string / plus decimal representation of \"N\" (e.g., 2 if there are two chunks in total, 3 if there three chunks in total, and so on) plus the fixed string / A segment encoded with numeric mode consisting of the characters 0 - 9 . Each character \"c\" of the JWS is converted into a sequence of two digits as by taking Ord(c)-45 and treating the result as a two-digit base ten number. For example, 'X' is encoded as 43 , since Ord('X') is 88 , and 88-45 is 43 . (The constant \"45\" appears here because it is the ordinal value of - , the lowest-valued character that can appear in a compact JWS. Subtracting 45 from the ordinal values of valid JWS characters produces a range between 00 and 99, ensuring that each character of the JWS can be represented in exactly two base-10 numeric digits.) (The reason for representing Health Cards using Numeric Mode QRs instead of Binary Mode (Latin-1) QRs is information density: with Numeric Mode, 20% more data can fit in a given QR, vs Binary Mode. This is because the JWS character set conveys only log_2(65) bits per character (~6 bits); binary encoding requires log_2(256) bits per character (8 bits), which means ~2 wasted bits per character.) For example: a single chunk might produce a QR code like shc:/56762909524320603460292437404460<snipped for brevity> in a longer JWS, the second chunk in a set of three might produce a QR code like shc:/2/3/56762909524320603460292437404460<snipped for brevity> When reading a QR code, scanning software can recognize a SMART Health Card from the shc:/ prefix. Stripping this prefix and the following <ordinal>/<count>/ and decoding the remaining pairs of numerals yields a JWS. \u3088\u304f\u3042\u308b\u8cea\u554f \u00b6 SMART Health Card\u306f\u3001\u8eab\u5206\u8a3c\u660e\u66f8\u306e\u5f62\u5f0f\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u304b\uff1f \u00b6 No. SMART Health Cards are designed for use alongside existing forms of identification (e.g., a driver's license in person, or an online ID verification service). A SMART Health Card is a non-forgeable digital artifact analogous to a paper record on official letterhead. Concretely, the problem SMART Health Cards solve is one of provenance: a digitally signed SMART Health Card is a credential that guarantees that a specific issuer generated the record. The duty of verifying that the person presenting a Health Card is the subject of the data within the Health Card (or is authorized to act on behalf of this data subject) falls to the person or system receiving and validating a Health Card. \u610f\u601d\u6c7a\u5b9a\u3067\u306f\u3069\u306e\u533b\u7642\u30c7\u30fc\u30bf\u304c\u8003\u616e\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u304b\uff1f \u00b6 The data in Health Cards should focus on communicating \"immutable clinical facts\". Each use case will define specific data profiles. For COVID-19 Vaccination Credentials, the SMART Health Cards: Vaccination IG defines requirements. When Health Cards are used in decision-making, the verifier is responsible for deciding what rules to apply. For example: decision-making rules may change over time as our understanding of the clinical science improves. decision-making rules may be determined or influenced by international, national and local health authorities. decision-making rules may require many inputs, some of which can be supplied by Health Cards and others of which may come from elsewhere (e.g., by asking the user \"are you experiencing any symptoms today?\"). \u81e8\u5e8a\u7d50\u679c\u3092\u5171\u6709\u3059\u308b\u4ee3\u308f\u308a\u306b\u300cSafe-to-fly Pass\u300d\u306e\u3088\u3046\u306a\u7d50\u8ad6\u3092\u5171\u6709\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u304b\uff1f \u00b6 Decision-making often results in a narrowly-scoped \"Pass\" that embodies conclusions like \"Person X qualifies for international flight between Country A and Country B, according to Rule Set C\". While Health Cards are designed to be long-lived and general-purpose, Passes are highly contextual. We are not attempting to standardize \"Passes\" in this framework, but Health Cards can provide an important verifiable input for the generation of Passes. SMART Health Cards\u306e\u5b9f\u88c5\u3092\u691c\u8a3c\u3067\u304d\u308b\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306f\u3042\u308a\u307e\u3059\u304b\uff1f \u00b6 \u4ee5\u4e0b\u306e\u3088\u3046\u306aHealth Card\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u306e\u691c\u8a3c\u306b\u5f79\u306b\u7acb\u3064\u30c4\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u3002 The HL7 FHIR Validator can be used to validate the Health Card's FHIR bundle The Health Cards Dev Tools can be used to validate the various Health Card artifacts. Other resources that are helpful for learning about and implementing SMART Health Cards include: The code used to generate the examples present in the spec. A Jupyter Notebook walkthrough and demo portals which demonstrate creating, validating and decoding a SMART Health Card as a QR code. SMART Health Cards\u3068\u5354\u8abf\u3067\u304d\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u308a\u307e\u3059\u304b\uff1f \u00b6 Libraries for SMART Health Cards \u3068\u3044\u3046wiki\u30da\u30fc\u30b8\u306b\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u304a\u3059\u3059\u3081\u304c\u3042\u308a\u307e\u3059\u3002 Potential Extensions \u00b6 Standardized presentation workflows \u00b6 The spec is currently focused on representing Health Cards in a standardized data payload. This allows many simple patterns for sharing, but future work can introduce standardized presentation exchange flows (e.g., OpenID Self-Issued Identity Provider, a.k.a. SIOP) \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u00b6 Fast Health Interoperability Resources (FHIR): https://hl7.org/fhir/ DEFLATE Compression: https://tools.ietf.org/html/rfc1951 JSON Web Token (JWT): https://tools.ietf.org/html/rfc7519 JSON Web Key (JWK): https://tools.ietf.org/html/rfc7517 JSON Web Key (JWK) Thumbprint: https://tools.ietf.org/html/rfc7638","title":"\u30d7\u30ed\u30c8\u30b3\u30eb"},{"location":"#_1","text":"\u3053\u308c\u306f\u3001 SMART Health Cards Framework \u306e\u65e5\u672c\u8a9e\u7ffb\u8a33\u3067\u3059\u3002SMART Health Cards\u306e\u4ed5\u69d8\u3092\u65e5\u672c\u8a9e\u3067\u7406\u89e3\u3059\u308b\u52a9\u3051\u3068\u306a\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\u6700\u65b0\u306e\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u3053\u306e\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066"},{"location":"#_2","text":"","title":"\u6982\u8981"},{"location":"#_3","text":"SMART Health Cards public landing page \u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u6280\u8853\u4ed5\u69d8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002","title":"\u6280\u8853\u7684\u3067\u306a\u3044\u6982\u8981\u306b\u3064\u3044\u3066\u63a2\u3057\u3066\u3044\u307e\u3059\u304b\uff1f"},{"location":"#_4","text":"\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u4f01\u696d\u3001\u7814\u7a76\u6240\u3001\u85ac\u5c40\u3001\u96fb\u5b50\u7684\u306a\u5065\u5eb7\u8a18\u9332\u3001\u304a\u3088\u3073\u514d\u75ab\u60c5\u5831\u30b7\u30b9\u30c6\u30e0\u306e\u30d9\u30f3\u30c0\u30fc\u304b\u3089\u306e\u610f\u898b\u3092\u307e\u3068\u3081\u3066\u4f5c\u6210\u3055\u308c\u305f\u6700\u521d\u306e\u5b89\u5b9a\u7248\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u3059\u3002","title":"\u30b9\u30c6\u30fc\u30bf\u30b9"},{"location":"#_5","text":"\u5909\u66f4\u3092\u63d0\u6848\u3059\u308b\u306b\u306f\u3001GitHub Issues \u3092\u4f7f\u3046\u304b\u3001 Pull Request \u3092\u9001\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3"},{"location":"#_6","text":"\u3053\u306e\u5b9f\u88c5\u30ac\u30a4\u30c9\u3067\u306f\u3001\u300cHealth Cards\u300d\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u77ed\u671f\u7684\u306a\u76ee\u6a19\u306f\u3001\u6d88\u8cbb\u8005\u304cCOVID-19\u30ef\u30af\u30c1\u30f3\u3084\u691c\u67fb\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u3057\u3001 \u3053\u308c\u3089\u306e\u7d50\u679c\u3092\u4ed6\u306e\u30d1\u30fc\u30c6\u30a3\u306b\u691c\u8a3c\u53ef\u80fd\u306a\u65b9\u6cd5\u3067\u63d0\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059 \u3002\u4e3b\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u306f\u3001\u8077\u5834\u3078\u306e\u5fa9\u5e30\u3084\u65c5\u884c\u306e\u305f\u3081\u306b\u7279\u5b9a\u6642\u70b9\u3067\u306e\u611f\u67d3\u72b6\u6cc1\u3092\u4f1d\u3048\u308b\u3053\u3068\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u514d\u75ab\u72b6\u614b\u3084\u305d\u306e\u4ed6\u306e\u5065\u5eb7\u72b6\u614b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u79c1\u305f\u3061\u306f\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u3092\u4fdd\u8a3c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001Health Cards\u306f\u7d44\u7e54\u3084\u7ba1\u8f44\u533a\u57df\u306e\u5883\u754c\u3092\u8d85\u3048\u3066\u6a5f\u80fd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u56fd\u969b\u7684\u306a\u6a19\u6e96\u3068\u5206\u6563\u578b\u306e\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3092\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u306f\u3058\u3081\u306b"},{"location":"#_7","text":"Issuer \uff08\u305f\u3068\u3048\u3070\u3001\u7814\u7a76\u6240\u3001\u85ac\u5c40\u3001\u75c5\u9662\u3001EHR\u3001\u516c\u7684\u306a\u5065\u5eb7\u90e8\u9580\u3001\u514d\u75ab\u60c5\u5831\u30b7\u30b9\u30c6\u30e0\u306a\u3069\uff09\u306f\u3001\u691c\u8a3c\u53ef\u80fd\u306a\u8a3c\u660e\u66f8\u3092\u767a\u884c\u3057\u307e\u3059\u3002 Holder \u306f\u3001\u8a3c\u660e\u66f8\u3092\u4fdd\u7ba1\u3057\u3001\u8a3c\u660e\u66f8\u3092\u81ea\u7531\u306b\u63d0\u793a\u3057\u307e\u3059\u3002 Verifier \u306f\u3001Holder\u304b\u3089\u8a3c\u660e\u66f8\u3092\u53d7\u3051\u53d6\u308a\u3001\u9069\u5207\u306b\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002","title":"\u6982\u5ff5\u30e2\u30c7\u30eb"},{"location":"#_8","text":"\u95a2\u9023\u3059\u308b\u533b\u7642\u30c7\u30fc\u30bf\u3092\u30e6\u30fc\u30b6\u30fc\u304c\u53d7\u3051\u53d6\u3063\u3066\u63d0\u793a\u3059\u308b \u30a8\u30f3\u30c9 \u30c8\u30a5 \u30a8\u30f3\u30c9\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc \u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068 \u30aa\u30fc\u30d7\u30f3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9 \u3092\u4f7f\u7528\u3057\u305f\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068 \u5f37\u529b\u306a \u6697\u53f7\u5b66\u7684\u7f72\u540d \u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068 \u7279\u5b9a\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306e\u305f\u3081\u306b \u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u3092\u4fdd\u8b77\u3059\u308b \u30c7\u30fc\u30bf\u8868\u73fe\u3092\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068","title":"\u8a2d\u8a08\u306e\u76ee\u6a19"},{"location":"#_9","text":"\u79c1\u305f\u3061\u306f\u3001\u30d8\u30eb\u30b9\u30b1\u30a2\u306e\u69d8\u3005\u306a\u5834\u6240\u3067\u5229\u7528\u3067\u304d\u308b\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u30d6\u30ed\u30c3\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001Health Cards\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\u30b3\u30a2\u3068\u306a\u308b\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u30d6\u30ed\u30c3\u30af\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u79c1\u305f\u3061\u306f\u30c7\u30fc\u30bf\u3092\u610f\u5473\u306e\u3042\u308b\u307e\u3068\u307e\u308a\u306b\u96c6\u7d04\u3057\u3001issuer\u306f\u7f72\u540d\u3057\u3001\u6d88\u8cbb\u8005\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4fdd\u7ba1\u30fb\u63d0\u793a\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5e83\u7bc4\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u306f\u3001\u6700\u7d42\u7684\u306b\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u53ef\u80fd\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u5b66\u6821\u3084\u96c7\u7528\u8005\u3001\u65c5\u884c\u306e\u305f\u3081\u306b\u5171\u6709\u3067\u304d\u308b\u3001\u514d\u75ab\u8a18\u9332\u3092\u7ba1\u7406\u3059\u308b \u691c\u8a3c\u53ef\u80fd\u306a\u5065\u5eb7\u5c65\u6b74\u306e\u30c7\u30fc\u30bf\u3092\u81e8\u5e8a\u7814\u7a76\u3067\u5171\u6709\u3059\u308b \u516c\u8846\u885b\u751f\u6a5f\u95a2\u3068\u81ea\u4e3b\u7684\u306a\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b \u533b\u7642\u63d0\u4f9b\u8005\u3068\u30a2\u30f3\u30b1\u30fc\u30c8\u306e\u56de\u7b54\u3092\u5171\u6709\u3059\u308b \u3053\u306e\u30b9\u30b3\u30fc\u30d7\u306f\u5e83\u7bc4\u3067\u3059\u304c\u3001\u79c1\u305f\u3061\u306b\u5fc5\u8981\u306a \u6210\u529f\u306e\u77ed\u671f\u7684\u306a\u5b9a\u7fa9 \u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u3081\u3089\u308c\u307e\u3059\u3002 COVID-19\u306e\u72b6\u614b\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u300cHealth Wallet\u300d\u5185\u306e\u300cHealth Cards\u300d\u3092\u63d0\u793a\u3059\u308b\u3053\u3068 \u305d\u308c\u305e\u308c\u306e\u5f79\u5272\uff08issuer\u3001holder\u3001\u30a2\u30d7\u30ea\uff09\u306f\u3001\u95a2\u9023\u3059\u308b\u4fe1\u983c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u7f72\u540d\u3059\u308b\u9650\u308a\u3001\u4ee5\u4e0b\u306e\u30aa\u30fc\u30d7\u30f3\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u306b\u5f93\u3046\u3053\u3068\u3067\u3069\u3093\u306a\u7d44\u7e54\u3067\u3082\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068","title":"\u5c0f\u3055\u304f\u306f\u3058\u3081\u3066\u3001\u5927\u304d\u304f\u8003\u3048\u308b"},{"location":"#_10","text":"\u30e6\u30fc\u30b6\u30fc \u306f\u3001Health Card\u3092Issuer\u304b\u3089 \u53d7\u3051\u53d6\u308a\u307e\u3059 \u3002Health Card\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u624b\u6bb5\u3067\u53d6\u5f97\u3067\u304d\u308b\u3001\u7f72\u540d\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u3067\u3059\u3002 issuer\u306f\u3001Health Card\u3092QR\u30b3\u30fc\u30c9\u3092\u542b\u3080\u66f8\u985e\u307e\u305f\u306fPDF\u3067\u63d0\u4f9b\u3059\u308b\uff08\u5fc5\u8981\u306a\u624b\u6bb5\uff09 issuer\u306f\u3001Health Card\u3092 .smart-health-card \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u624b\u6bb5\u3092\u63d0\u4f9b\u3059\u308b\uff08\u5fc5\u8981\u306a\u624b\u6bb5\uff09 issuer hosts a Health Card for FHIR API access via a compatible Health Wallet application. This workflow includes a SMART on FHIR authorization step with an Issuer, where the user grants read access to any resources that will be present in Health Cards (e.g., Patient , Immunization , Observation , DiagnosticReport ) \u30e6\u30fc\u30b6\u30fc\u306bHealth Cards\u4e0a\u306b\u63d0\u793a\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u8aad\u307f\u53d6\u308a\u30a2\u30af\u30bb\u30b9\u3092\u4e0e\u3048\u308b \u30e6\u30fc\u30b6\u30fc \u306f\u3001\u66f8\u985e\u307e\u305f\u306f\u30c7\u30b8\u30bf\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066Health Card\u3092 \u4fdd\u5b58\u3057\u307e\u3059 \u3002 \u30e6\u30fc\u30b6\u30fc \u306f\u3001Health Card\u3092Verifier\u306b \u63d0\u793a\u3057\u307e\u3059 \u3002\u63d0\u793a\u65b9\u6cd5\u306b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u660e\u793a\u7684\u306a\u30aa\u30d7\u30c8\u30a4\u30f3\u3068\u627f\u8a8d\u304c\u3042\u308a\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001QR\u30b3\u30fc\u30c9\u306e\u63d0\u793a\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5171\u6709\u3001\u307e\u305f\u306f\u3001\u30c7\u30d0\u30a4\u30b9\u4e0a\u306eSDK\u306e\u4f7f\u7528\uff08\u305f\u3068\u3048\u3070\u3001verifier\u304b\u3089holder\u3078\u306e\u30a2\u30d7\u30ea\u9593\u901a\u4fe1\u306e\u305f\u3081\uff09\u304c\u95a2\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30e6\u30fc\u30b6\u30fc\u30a8\u30af\u30b9\u30da\u30ea\u30a8\u30f3\u30b9\u3068\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc"},{"location":"#_11","text":"Anyone can issue Health Cards, and every verifier can make its own decision about which issuers to trust . A \"trust framework\" can help verifiers to externalize these decisions and drive toward more consistent practices. The SMART Health Cards IG is designed to operate independent of any trust framework, while allowing trust frameworks to be layered on top. We anticipate such frameworks will emerge to meet different jurisdictional and use case driven requirements. In all cases, verifiers can discover public keys associated with an issuer via /.well-known/jwks.json URLs.","title":"\u4fe1\u983c"},{"location":"#_12","text":"","title":"\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc"},{"location":"#_13","text":"It is an explicit design goal to let the holder only disclose a minimum amount of information to a verifier. The information required to be disclosed is use-case dependent, and -- particularly in a healthcare setting -- it can be difficult for lay people to judge which data elements are necessary to be shared. The granularity of information disclosure will be at the level of an entire credential (i.e., a user can select \"which cards\" to share from a Health Wallet, and each card is shared wholesale). The credentials are designed to only include the minimum information necessary for a given use case.","title":"\u30c7\u30fc\u30bf\u306e\u6700\u5c0f\u5316"},{"location":"#_14","text":"Data holders should have full control over the data they choose to share for a particular use-case. Since Health Cards are signed by the issuer and cannot be altered later, it is important to ensure that Health Cards are created with granular sharing in mind. Therefore, issuers SHOULD only combine distinct data elements into a Health Card when a Health Card FHIR profile requires it. Additionally, Health Card FHIR Profiles SHOULD only include data that need to be conveyed together. (e.g., immunizations for different diseases should be kept separate. Immunizations and lab results should be kept separate.)","title":"\u7d30\u7c92\u5ea6\u306e\u5171\u6709"},{"location":"#_15","text":"If we identify optional data elements for a given use case, we might incorporate them into credentials by including a cryptographic hash of their values instead of embedding values directly. Longer term we can provide more granular options using techniques like zero-knowledge proofs, or by allowing a trusted intermediary to summarize results in a just-in-time fashion.","title":"\u5c06\u6765\u306e\u691c\u8a0e\u4e8b\u9805"},{"location":"#_16","text":"This framework defines a general approach to representing demographic and clinical data in FHIR , outlined in Modeling Verifiable Credentials in FHIR . Specific use cases for Health Cards will define specific data profiles. COVID-19 Vaccination Credentials : See SMART Health Cards: Vaccination IG","title":"\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb"},{"location":"#_17","text":"","title":"\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8a73\u7d30"},{"location":"#_18","text":"Health Cards Framework\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30ad\u30fc\u306e\u7a2e\u985e\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Elliptic Curve keys using the P-256 curve","title":"\u6697\u53f7\u5b66\u7684\u30ad\u30fc\u306e\u751f\u6210\u3068\u89e3\u6c7a"},{"location":"#health-cards","text":"Issuers sign Health Card VCs (Verifiable Credentials) with a signing key (private key) Issuer publish the corresponding public key (public key) at /.well-known/jwks.json Wallets and Verifiers use the public key to verify Issuer signatures on Health Cards","title":"Health Cards\u3078\u306e\u7f72\u540d"},{"location":"#issuer","text":"Each public key used to verify signatures is represented as a JSON Web Key (see RFC 7517 ): SHALL have \"kty\": \"EC\" , \"use\": \"sig\" , and \"alg\": \"ES256\" SHALL have \"kid\" equal to the base64url-encoded SHA-256 JWK Thumbprint of the key (see RFC7638 ) SHALL have \"crv\": \"P-256 , and \"x\" , \"y\" equal to the base64url-encoded values for the public Elliptic Curve point coordinates (see RFC7518 ) SHALL NOT have the Elliptic Curve private key parameter \"d\" If the issuer has an X.509 certificate for the public key, SHALL have \"x5c\" equal to an array of one or more base64-encoded (not base64url-encoded) DER representations of the public certificate or certificate chain (see RFC7517 ). The public key listed in the first certificate in the \"x5c\" array SHALL match the public key specified by the \"crv\" , \"x\" , and \"y\" parameters of the same JWK entry. If the issuer has more than one certificate for the same public key (e.g. participation in more than one trust community), then a separate JWK entry is used for each certificate with all JWK parameter values identical except \"x5c\" . Issuers SHALL publish their public keys as JSON Web Key Sets (see RFC7517 ), available at <<iss value from JWS>> + /.well-known/jwks.json , with Cross-Origin Resource Sharing (CORS) enabled, using TLS version 1.2 following the IETF BCP 195 recommendations or TLS version 1.3 (with any configuration). The URL at <<iss value from JWS>> SHALL use the https scheme and SHALL NOT include a trailing / . For example, https://smarthealth.cards/examples/issuer is a valid iss value ( https://smarthealth.cards/examples/issuer/ is not ). Signing keys in the .keys[] array can be identified by kid following the requirements above (i.e., by filtering on kty , use , and alg ). For example, the following is a fragment of a jwks.json file with one signing key: { \"keys\" :[ { \"kty\" : \"EC\" , \"kid\" : \"_IY9W2kRRFUigDfSB9r8jHgMRrT0w4p5KN93nGThdH8\" , \"use\" : \"sig\" , \"alg\" : \"ES256\" , \"crv\" : \"P-256\" , \"x\" : \"7xbC_9ZmFwKqOHpwX6-LnlhIh5SMIuNwl0PW1yVI_sk\" , \"y\" : \"7k2fdIRNDHdf93vL76wxdXEPtj_GiMTTyecm7EUUMQo\" , } ] }","title":"issuer\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u30ad\u30fc\u3092\u7279\u5b9a\u3059\u308b"},{"location":"#_19","text":"X.509 certificates can be used by issuers to indicate the issuer's participation in a PKI-based trust framework. If the Verifier supports PKI-based trust frameworks and the Health Card issuer includes the \"x5c\" parameter in matching JWK entries from the .keys[] array, the Verifier establishes that the issuer is trusted as follows: Verifier validates the leaf certificate's binding to the Health Card issuer by: matching the <<iss value from JWS>> to the value of a uniformResourceIdentifier entry in the certificate's Subject Alternative Name extension (see RFC5280 ), and verifying the signature in the Health Card using the public key in the certificate. Verifier constructs a valid certificate path of unexpired and unrevoked certificates to one of its trusted anchors (see RFC5280 ).","title":"\u8a3c\u660e\u66f8"},{"location":"#_20","text":"Issuers SHOULD generate new signing keys at least annually. When an issuer generates a new key to sign Health Cards, the public key SHALL be added to the issuer's JWK set in its jwks.json file. Retired private keys that are no longer used to sign Health Cards SHALL be destroyed. Older public key entries that are needed to validate previously signed Health Cards SHALL remain in the JWK set for as long as the corresponding Health Cards are clinically relevant. However, if a private signing key is compromised, then the issuer SHALL immediately remove the corresponding public key from the JWK set in its jwks.json file and request revocation of all X.509 certificates bound to that public key.","title":"\u30ad\u30fc\u306e\u7ba1\u7406"},{"location":"#issuer_1","text":"When the issuer is ready to generate a Health Card, the issuer creates a FHIR payload and packs it into a corresponding Health Card VC (or Health Card Set). sequenceDiagram participant Holder participant Issuer note over Holder, Issuer: Earlier... Issuer ->> Issuer: Generate Issuer's keys Issuer ->> Issuer: If Health Card data for holder already exist: re-generate VCs note over Issuer, Holder: Data Created Issuer ->> Issuer: Generate FHIR Representation Issuer ->> Issuer: Generate VC Representation Issuer ->> Issuer: Generate JWS Payload and sign note over Issuer, Holder: Later... Issuer ->> Holder: Holder receives Health Card","title":"Issuer\u304c\u7d50\u679c\u3092\u751f\u6210\u3059\u308b"},{"location":"#health-cardscompact-serialization-json-web-signaturesjws","text":"The VC structure (scaffold) is shown in the following example. The Health Cards framework serializes VCs using the compact JWS serialization, where the payload is a compressed set of JWT claims (see Appendix 3 of RFC7515 for an example using ECDSA P-256 SHA-256, as required by this specification). Specific encoding choices ensure compatibility with standard JWT claims, as described at https://www.w3.org/TR/vc-data-model/#jwt-encoding . The type , and credentialSubject properties are added to the vc claim of the JWT. The type values are defined in Credential Types ; the https://smarthealth.cards#health-card SHALL be present; other types SHOULD be included when they apply. Verifiers and other entities processing SMART Health Cards SHALL ignore any additional type elements they do not understand. The issuer property is represented by the registered JWT iss claim and the issuanceDate property is represented by the registered JWT nbf (\"not before\") claim (encoded as the number of seconds from 1970-01-01T00:00:00Z UTC, as specified by RFC 7519 ). Hence, the overall JWS payload matches the following structure (before it is minified and compressed ): { \"iss\" : \"<<Issuer URL>>\" , \"nbf\" : 1591037940 , \"vc\" : { \"type\" : [ \"https://smarthealth.cards#health-card\" , \"<<Additional Types>>\" , ], \"credentialSubject\" : { \"fhirVersion\" : \"<<FHIR Version, e.g. '4.0.1'>>\" , \"fhirBundle\" :{ \"resourceType\" : \"Bundle\" , \"type\" : \"collection\" , \"entry\" : [ \"<<FHIR Resource>>\" , \"<<FHIR Resource>>\" , \"...\" ] } } } }","title":"Health Cards\u306fCompact Serialization JSON Web Signatures\uff08JWS\uff09\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u308b"},{"location":"#health-cards_1","text":"To ensure that all Health Cards can be represented in QR codes, issuers SHALL ensure that the following constraints apply at the time of issuance: JWS Header header includes alg: \"ES256\" header includes zip: \"DEF\" header includes kid equal to the base64url-encoded SHA-256 JWK Thumbprint of the key (see RFC7638 ) JWS Payload payload is minified (i.e., all optional whitespace is stripped) payload is compressed with the DEFLATE (see RFC1951 ) algorithm before being signed (note, this should be \"raw\" DEFLATE compression, omitting any zlib or gz headers) payload .vc.credentialSubject.fhirBundle is created: without Resource.id elements without Resource.meta elements (or if present, .meta.security is included and no other fields are included) without DomainResource.text elements without CodeableConcept.text elements without Coding.display elements with Bundle.entry.fullUrl populated with short resource -scheme URIs (e.g., {\"fullUrl\": \"resource:0\"} ) with Reference.reference populated with short resource -scheme URIs (e.g., {\"patient\": {\"reference\": \"resource:0\"}} ) For details about how to embed Health Cards in a QR code, see below .","title":"Health Cards\u306f\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044"},{"location":"#userhealth-cards","text":"In this step, the user learns that a new Health Card is available (e.g., by receiving a text message or email notification, or by an in-wallet notification for FHIR-enabled issuers.)","title":"User\u304cHealth Cards\u3092\u53d6\u5f97\u3059\u308b"},{"location":"#_21","text":"To facilitate this workflow, the issuer can include a link to help the user download the credentials directly, e.g., from a login-protected page in the Issuer's patient portal. The file SHALL be served with a .smart-health-card file extension and SHALL be provided with a MIME type of application/smart-health-card (e.g., web servers SHALL include Content-Type: application/smart-health-card as an HTTP Response containing a Health Card), so the Health Wallet app can be configured to recognize this extension and/or MIME type. Contents should be a JSON object containing an array of Verifiable Credential JWS strings: { \"verifiableCredential\" : [ \"<<Verifiable Credential as JWS>>\" , \"<<Verifiable Credential as JWS>>\" ] }","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u3088\u308b\u65b9\u6cd5"},{"location":"#qr","text":"Alternatively, issuers can make any individual JWS inside a Health Card available embedded in a QR code (for instance, printed on a paper-based vaccination record or after-visit summary document). See details . Finally, the Health Wallet asks the user if they want to save any/all of the supplied credentials.","title":"QR\u30b3\u30fc\u30c9\u306b\u3088\u308b\u65b9\u6cd5\uff08\u5370\u5237\u307e\u305f\u306f\u30b9\u30ad\u30e3\u30f3\uff09"},{"location":"#fhir-health-cards-issue-operation","text":"For a more seamless user experience when FHIR API connections are already in place, results may also be conveyed through a FHIR API $health-cards-issue operation defined here . For issuers that support SMART on FHIR access, the Health Wallet MAY request authorization with SMART on FHIR scopes (e.g., launch/patient patient/Immunization.read for an Immunization use case). This allows the Health Wallet to automatically request issuance of VCs, including requests for periodic updates.","title":"FHIR $health-cards-issue Operation\u306b\u3088\u308b\u65b9\u6cd5"},{"location":"#health-cardsverifier","text":"In this step, the verifier asks the user to share a COVID-19 result. A Health Card containing the result can be conveyed by presenting a QR code; by uploading a file; or by leveraging device-specific APIs. Over time, we will endeavor to standardize presentation workflows including device-specific patterns and web-based exchange.","title":"Health Cards\u3092Verifier\u306b\u63d0\u793a\u3059\u308b"},{"location":"#health-cardqr","text":"Each JWS string that appears in the .verifiableCredential[] of a .smart-health-card file can be embedded in one or more QR codes. We aim to ensure that printed (or electronically displayed) codes are usable at physical dimensions of 40mmx40mm. This constraint allows us to use QR codes up to Version 22, at 105x105 modules. When embedding a JWS string in QR codes, the JWS string SHALL be encoded as Numerical Mode QR codes consisting of the digits 0-9 (see \"Encoding Chunks as QR codes\" ). Ensuring Health Cards can be presented as QR codes: Allows basic storage and sharing of Health Cards for users without a smartphone Allows smartphone-enabled users to print a usable backup Allows full Health Card contents to be shared with a verifier The following limitations apply when presenting Health Card as QR codes, rather than engaging in device-based workflows: Does not capture a digital record of a request for presentation Verifier cannot include requirements in-band Verifier cannot include purposes of use in-band Does not capture a digital record of the presentation","title":"\u3059\u3079\u3066\u306eHealth Card\u306fQR\u30b3\u30fc\u30c9\u306b\u57cb\u3081\u8fbc\u3081\u308b"},{"location":"#health-card-jwsqrqr","text":"","title":"Health Card JWS\u304b\u3089QR\u30b3\u30fc\u30c9\uff08\u307e\u305f\u306f\u8907\u6570\u306eQR\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\uff09\u3092\u751f\u6210\u3059\u308b"},{"location":"#_22","text":"Commonly, Health Cards will fit in a single V22 QR code. Any JWS longer than 1195 characters SHALL be split into \"chunks\" of length 1191 or smaller; each chunk SHALL be encoded as a separate QR code of V22 or lower, to ensure ease of scanning. Each chunk SHALL be numerically encoded and prefixed with an ordinal as well as the total number of chunks required to re-assemble the JWS, as described below. The QR code FAQ page details max JWS length restrictions at various error correction levels. To ensure the best user experience when producing and consuming multiple QR codes: Producers of QR codes SHOULD balance the sizes of chunks. For example, if a JWS is 1200 characters long, producers should create two ~600 character chunks rather than a 1191 character chunk and a 9 character chunk. Consumers of QR codes SHOULD allow for scanning the multiple QR codes in any order. Once the full set is scanned, the JWS can be assembled and validated.","title":"\u30c1\u30e3\u30f3\u30af\u5316"},{"location":"#qr_1","text":"When printing or displaying a Health Card using QR codes, let \"N\" be the total number of chunks required, and let \"C\" be a variable indicating the index of the current chunk. Each chunk of the JWS string value SHALL be represented as a QR with two data segments: A segment encoded with bytes mode consisting of the fixed string shc:/ (registered as an IANA scheme ) plus (only if more than one chunk is required) decimal representation of \"C\" (e.g., 1 for the first chunk, 2 for the second chunk, and so on) plus the fixed string / plus decimal representation of \"N\" (e.g., 2 if there are two chunks in total, 3 if there three chunks in total, and so on) plus the fixed string / A segment encoded with numeric mode consisting of the characters 0 - 9 . Each character \"c\" of the JWS is converted into a sequence of two digits as by taking Ord(c)-45 and treating the result as a two-digit base ten number. For example, 'X' is encoded as 43 , since Ord('X') is 88 , and 88-45 is 43 . (The constant \"45\" appears here because it is the ordinal value of - , the lowest-valued character that can appear in a compact JWS. Subtracting 45 from the ordinal values of valid JWS characters produces a range between 00 and 99, ensuring that each character of the JWS can be represented in exactly two base-10 numeric digits.) (The reason for representing Health Cards using Numeric Mode QRs instead of Binary Mode (Latin-1) QRs is information density: with Numeric Mode, 20% more data can fit in a given QR, vs Binary Mode. This is because the JWS character set conveys only log_2(65) bits per character (~6 bits); binary encoding requires log_2(256) bits per character (8 bits), which means ~2 wasted bits per character.) For example: a single chunk might produce a QR code like shc:/56762909524320603460292437404460<snipped for brevity> in a longer JWS, the second chunk in a set of three might produce a QR code like shc:/2/3/56762909524320603460292437404460<snipped for brevity> When reading a QR code, scanning software can recognize a SMART Health Card from the shc:/ prefix. Stripping this prefix and the following <ordinal>/<count>/ and decoding the remaining pairs of numerals yields a JWS.","title":"\u30c1\u30e3\u30f3\u30af\u3092QR\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b"},{"location":"#_23","text":"","title":"\u3088\u304f\u3042\u308b\u8cea\u554f"},{"location":"#smart-health-card","text":"No. SMART Health Cards are designed for use alongside existing forms of identification (e.g., a driver's license in person, or an online ID verification service). A SMART Health Card is a non-forgeable digital artifact analogous to a paper record on official letterhead. Concretely, the problem SMART Health Cards solve is one of provenance: a digitally signed SMART Health Card is a credential that guarantees that a specific issuer generated the record. The duty of verifying that the person presenting a Health Card is the subject of the data within the Health Card (or is authorized to act on behalf of this data subject) falls to the person or system receiving and validating a Health Card.","title":"SMART Health Card\u306f\u3001\u8eab\u5206\u8a3c\u660e\u66f8\u306e\u5f62\u5f0f\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u304b\uff1f"},{"location":"#_24","text":"The data in Health Cards should focus on communicating \"immutable clinical facts\". Each use case will define specific data profiles. For COVID-19 Vaccination Credentials, the SMART Health Cards: Vaccination IG defines requirements. When Health Cards are used in decision-making, the verifier is responsible for deciding what rules to apply. For example: decision-making rules may change over time as our understanding of the clinical science improves. decision-making rules may be determined or influenced by international, national and local health authorities. decision-making rules may require many inputs, some of which can be supplied by Health Cards and others of which may come from elsewhere (e.g., by asking the user \"are you experiencing any symptoms today?\").","title":"\u610f\u601d\u6c7a\u5b9a\u3067\u306f\u3069\u306e\u533b\u7642\u30c7\u30fc\u30bf\u304c\u8003\u616e\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u304b\uff1f"},{"location":"#safe-to-fly-pass","text":"Decision-making often results in a narrowly-scoped \"Pass\" that embodies conclusions like \"Person X qualifies for international flight between Country A and Country B, according to Rule Set C\". While Health Cards are designed to be long-lived and general-purpose, Passes are highly contextual. We are not attempting to standardize \"Passes\" in this framework, but Health Cards can provide an important verifiable input for the generation of Passes.","title":"\u81e8\u5e8a\u7d50\u679c\u3092\u5171\u6709\u3059\u308b\u4ee3\u308f\u308a\u306b\u300cSafe-to-fly Pass\u300d\u306e\u3088\u3046\u306a\u7d50\u8ad6\u3092\u5171\u6709\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u304b\uff1f"},{"location":"#smart-health-cards","text":"\u4ee5\u4e0b\u306e\u3088\u3046\u306aHealth Card\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u306e\u691c\u8a3c\u306b\u5f79\u306b\u7acb\u3064\u30c4\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u3002 The HL7 FHIR Validator can be used to validate the Health Card's FHIR bundle The Health Cards Dev Tools can be used to validate the various Health Card artifacts. Other resources that are helpful for learning about and implementing SMART Health Cards include: The code used to generate the examples present in the spec. A Jupyter Notebook walkthrough and demo portals which demonstrate creating, validating and decoding a SMART Health Card as a QR code.","title":"SMART Health Cards\u306e\u5b9f\u88c5\u3092\u691c\u8a3c\u3067\u304d\u308b\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306f\u3042\u308a\u307e\u3059\u304b\uff1f"},{"location":"#smart-health-cards_1","text":"Libraries for SMART Health Cards \u3068\u3044\u3046wiki\u30da\u30fc\u30b8\u306b\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u304a\u3059\u3059\u3081\u304c\u3042\u308a\u307e\u3059\u3002","title":"SMART Health Cards\u3068\u5354\u8abf\u3067\u304d\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u308a\u307e\u3059\u304b\uff1f"},{"location":"#potential-extensions","text":"","title":"Potential Extensions"},{"location":"#standardized-presentation-workflows","text":"The spec is currently focused on representing Health Cards in a standardized data payload. This allows many simple patterns for sharing, but future work can introduce standardized presentation exchange flows (e.g., OpenID Self-Issued Identity Provider, a.k.a. SIOP)","title":"Standardized presentation workflows"},{"location":"#_25","text":"Fast Health Interoperability Resources (FHIR): https://hl7.org/fhir/ DEFLATE Compression: https://tools.ietf.org/html/rfc1951 JSON Web Token (JWT): https://tools.ietf.org/html/rfc7519 JSON Web Key (JWK): https://tools.ietf.org/html/rfc7517 JSON Web Key (JWK) Thumbprint: https://tools.ietf.org/html/rfc7638","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"},{"location":"changelog/","text":"Changelog \u00b6 1.1.1 \u00b6 Added verifier guidance to ignore unrecognized VC types 1.1.0 \u00b6 Updated TLS requirements for issuer key set 1.0.2 \u00b6 Updated links to the HL7 Implementation Guide 1.0.1 \u00b6 Clarify FHIR API behavior when $health-cards-issue doesn't return results 1.0.0 \u00b6 No functional change from 1.0.0-rc; added documentation links and re-worked introduction. 1.0.0-rc \u00b6 No change from 0.4.5; applying tag for connectathon release 0.4.5 \u00b6 Clarify mapping into VC Data Model, and strip \"fixed\" fields from payload 0.4.4 \u00b6 Resource.meta is allowed in one special case 0.4.3 \u00b6 Document CORS expectation for .well-known/jwks.json 0.4.2 \u00b6 Replace iat with nbf in JWT payload encoding 0.4.1 \u00b6 Added optional x5c in JWKS 0.3.1 \u00b6 Add optional vcIndex param on $health-cards-issue response's resourceLink 0.3.0 \u00b6 Rename $HealthWallet.issueVc to $health-cards-issue 0.2.0 \u00b6 Chunk-based QR representation of larger Health Cards (JWS > 1195 characters). Defines shc:/<n>/<c>/ prefix, where <n> represents a chunk number and <c> represents the total chunk count. 0.1.1 \u00b6 Added shc:/ prefix for QR representations. 0.1.0 \u00b6 Significant API overhaul to reduce scope and simplify dependencies. See PR#64 for details. Remove user DIDs from the picture. They were already optional, and in some of our most important flows unlikely to be available. Remove the need to bind an issuer to a holder ahead of time. SMART on FHIR clients can now call $HealthWallet.issueVc without having to call $HealthWallet.connect first Update $HealthWallet.issueVc response to use valueString (avoids the need for base64 encoding in the FHIR Parameters resource) Replace DID-based key discovery with hosted JSON Web Key. Establish the requirement that Issuers host .well-known/jwks.json Define requirements for keeping Health Cards' JWS representation small (small enough to fit in a QR code) -- including size limits and a method for splitting a Health Card into a Health Card Set when the size limit cannot be met Document process for embedding Health Cards in QR codes Update file extension and MIME type for representing Health Cards as downloadable files ( .smart-health-card and application/smart-health-card ) Remove SIOP flow For Verifier::Holder communications 0.0.12 \u00b6 Add optional resourceLink response parameter on $HealthWallet.issueVc 0.0.11 \u00b6 Change canonical domain to https://smarthealth.cards (from https://healthwallet.cards) 0.0.10 \u00b6 Add detail on how to recognize encryption keys, signing keys, and linked domains in a DID Document 0.0.9 \u00b6 Add discovery params to .well-known/smart-configuration , allowing SMART on FHIR servers to advertise Health Cards capabilities 0.0.8 \u00b6 Clarify that .fhir-backed-vc files can contain JWS- or JWE-based VCs Update JWS signature algorithm to ES256 0.0.7 \u00b6 Simplify demographics recommendations with one uniform \"minimum set\" 0.0.6 \u00b6 Updated encryption to use \"alg\": \"ECDH-ES\" (with \"enc\": \"A256GCM\" ) 0.0.5 \u00b6 Updated encryption to use \"enc\": \"A256GCM\" 0.0.4 \u00b6 Added links to overview / intro video Updated SIOP request to identify requested credentials by type URL ( https://healthwallet.cards#covid19 instead of health-wallet-covid19-card ) 0.0.3 \u00b6 Update .well-known DID links and file URL to match latest spec 0.0.2 \u00b6 Use valueUri (which exists in DSTU2+) for FHIR datatypes rather than valueUrl (which was introduced after DSTU2) Added encryptForKeyId parameter to $HealthWallet.issueVc operation, defaulting to absent == no encryption Updated example VC JWT representations to ensure that the .vc.credentialSubject contains all subject-specific claims Defined OperationOutcome payload for failed $HealthWallet.issueVc operations","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#111","text":"Added verifier guidance to ignore unrecognized VC types","title":"1.1.1"},{"location":"changelog/#110","text":"Updated TLS requirements for issuer key set","title":"1.1.0"},{"location":"changelog/#102","text":"Updated links to the HL7 Implementation Guide","title":"1.0.2"},{"location":"changelog/#101","text":"Clarify FHIR API behavior when $health-cards-issue doesn't return results","title":"1.0.1"},{"location":"changelog/#100","text":"No functional change from 1.0.0-rc; added documentation links and re-worked introduction.","title":"1.0.0"},{"location":"changelog/#100-rc","text":"No change from 0.4.5; applying tag for connectathon release","title":"1.0.0-rc"},{"location":"changelog/#045","text":"Clarify mapping into VC Data Model, and strip \"fixed\" fields from payload","title":"0.4.5"},{"location":"changelog/#044","text":"Resource.meta is allowed in one special case","title":"0.4.4"},{"location":"changelog/#043","text":"Document CORS expectation for .well-known/jwks.json","title":"0.4.3"},{"location":"changelog/#042","text":"Replace iat with nbf in JWT payload encoding","title":"0.4.2"},{"location":"changelog/#041","text":"Added optional x5c in JWKS","title":"0.4.1"},{"location":"changelog/#031","text":"Add optional vcIndex param on $health-cards-issue response's resourceLink","title":"0.3.1"},{"location":"changelog/#030","text":"Rename $HealthWallet.issueVc to $health-cards-issue","title":"0.3.0"},{"location":"changelog/#020","text":"Chunk-based QR representation of larger Health Cards (JWS > 1195 characters). Defines shc:/<n>/<c>/ prefix, where <n> represents a chunk number and <c> represents the total chunk count.","title":"0.2.0"},{"location":"changelog/#011","text":"Added shc:/ prefix for QR representations.","title":"0.1.1"},{"location":"changelog/#010","text":"Significant API overhaul to reduce scope and simplify dependencies. See PR#64 for details. Remove user DIDs from the picture. They were already optional, and in some of our most important flows unlikely to be available. Remove the need to bind an issuer to a holder ahead of time. SMART on FHIR clients can now call $HealthWallet.issueVc without having to call $HealthWallet.connect first Update $HealthWallet.issueVc response to use valueString (avoids the need for base64 encoding in the FHIR Parameters resource) Replace DID-based key discovery with hosted JSON Web Key. Establish the requirement that Issuers host .well-known/jwks.json Define requirements for keeping Health Cards' JWS representation small (small enough to fit in a QR code) -- including size limits and a method for splitting a Health Card into a Health Card Set when the size limit cannot be met Document process for embedding Health Cards in QR codes Update file extension and MIME type for representing Health Cards as downloadable files ( .smart-health-card and application/smart-health-card ) Remove SIOP flow For Verifier::Holder communications","title":"0.1.0"},{"location":"changelog/#0012","text":"Add optional resourceLink response parameter on $HealthWallet.issueVc","title":"0.0.12"},{"location":"changelog/#0011","text":"Change canonical domain to https://smarthealth.cards (from https://healthwallet.cards)","title":"0.0.11"},{"location":"changelog/#0010","text":"Add detail on how to recognize encryption keys, signing keys, and linked domains in a DID Document","title":"0.0.10"},{"location":"changelog/#009","text":"Add discovery params to .well-known/smart-configuration , allowing SMART on FHIR servers to advertise Health Cards capabilities","title":"0.0.9"},{"location":"changelog/#008","text":"Clarify that .fhir-backed-vc files can contain JWS- or JWE-based VCs Update JWS signature algorithm to ES256","title":"0.0.8"},{"location":"changelog/#007","text":"Simplify demographics recommendations with one uniform \"minimum set\"","title":"0.0.7"},{"location":"changelog/#006","text":"Updated encryption to use \"alg\": \"ECDH-ES\" (with \"enc\": \"A256GCM\" )","title":"0.0.6"},{"location":"changelog/#005","text":"Updated encryption to use \"enc\": \"A256GCM\"","title":"0.0.5"},{"location":"changelog/#004","text":"Added links to overview / intro video Updated SIOP request to identify requested credentials by type URL ( https://healthwallet.cards#covid19 instead of health-wallet-covid19-card )","title":"0.0.4"},{"location":"changelog/#003","text":"Update .well-known DID links and file URL to match latest spec","title":"0.0.3"},{"location":"changelog/#002","text":"Use valueUri (which exists in DSTU2+) for FHIR datatypes rather than valueUrl (which was introduced after DSTU2) Added encryptForKeyId parameter to $HealthWallet.issueVc operation, defaulting to absent == no encryption Updated example VC JWT representations to ensure that the .vc.credentialSubject contains all subject-specific claims Defined OperationOutcome payload for failed $HealthWallet.issueVc operations","title":"0.0.2"},{"location":"credential-modeling/","text":"FHIR\u3067\u691c\u8a3c\u53ef\u80fd\u306a\u533b\u7642\u60c5\u5831 \u00b6 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001 FHIR \u3067\u30e2\u30c7\u30eb\u5316\u3055\u308c\u305f\u533b\u7642\u60c5\u5831\u3092 W3C Verifiable Credentials \uff08VC\uff09\u57fa\u3065\u3044\u3066\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3059\u308b\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5b9a\u7fa9 \u00b6 \u691c\u8a3c\u53ef\u80fd\u306a\u533b\u7642\u60c5\u5831\u3092\u63d0\u793a\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u307e\u305a\u306f\u3058\u3081\u306b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u7279\u6709\u306e\u6c7a\u5b9a\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u5408\u308f\u305b\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3055\u308c\u3066\u7dad\u6301\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3001\u4e00\u9023\u306e\u5fc5\u9808\u304a\u3088\u3073\u30aa\u30d7\u30b7\u30e7\u30f3\u306e FHIR content resources \uff08\u4f8b\uff1a Immunization \u3084 Observation \u306a\u3069\uff09\u3092\u6c7a\u3081\u308b \u3053\u308c\u3089\u306eFHIR content resources\u3092\u3001 FHIR identity resources \uff08\u4f8b\uff1a Patient \uff09\u3092\u7d4c\u7531\u3057\u3066\u3001\u500b\u4eba\u306e\u5916\u90e8\u306eID\u3068\u7d10\u4ed8\u3051\u308b\u65b9\u6cd5\u3092\u6c7a\u3081\u308b \u3053\u308c\u3089\u3092\u6c7a\u5b9a\u3059\u308c\u3070\u3001VC\u306f\u3001 credential subject \u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u69cb\u6210\u3067\u304d\u307e\u3059\u3002 credentialSubject \u306b\u4ee5\u4e0b\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u8981\u7d20\u3092\u6301\u305f\u305b\u308b fhirVersion : a string representation of the semantic FHIR version the content is represented in (e.g. 1.0.* for DSTU2, 4.0.* for R4, where * is a number, not a literal asterisk) fhirBundle : a FHIR Bundle resource of type \"collection\" that includes all required FHIR resources (content + identity resources) \"credentialSubject\" \u306epayload\u306f\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002 { \"...\" , \"fhirVersion\" : \"4.0.1\" , \"fhirBundle\" : { \"resourceType\" : \"Bundle\" , \"type\" : \"collection\" , \"entry\" : [ \"...\" ] } \u4ee5\u4e0b\u3067\u306fHealth Card\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u304c\u3001FHIR\u304b\u3089VC\u3092\u69cb\u7bc9\u3059\u308b\u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u4ed6\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3082\u9069\u7528\u3067\u304d\u307e\u3059\u3002 \u300cHealth Card\u300d\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b \u00b6 \u300cHealth Card\u300d\u306f\u30011\u3064\u306e\u72ec\u7acb\u3057\u305f\u30c8\u30d4\u30c3\u30af\u306b\u95a2\u3059\u308b\u7d50\u679c\u3092\u4f1d\u9054\u3059\u308bVC\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u3001\u30ef\u30af\u30c1\u30f3\u63a5\u7a2e\u306e\u8a73\u7d30\u304c\u8a18\u9332\u3055\u308c\u305f COVID-19\u306e\u514d\u75ab\u30ab\u30fc\u30c9 \u3067\u3059\u3002\u4ed6\u306e\u30ab\u30fc\u30c9\u3068\u3057\u3066\u306f\u3001\u305f\u3068\u3048\u3070\u3001COVID-19\u306eRT-PCR\u30c6\u30b9\u30c8\u306e\u8a73\u7d30\u3001COVID-19\u306e\u8a3a\u65ad\u7d50\u679c\u3001TDAP\u30ef\u30af\u30c1\u30f3\u306a\u3069\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u307e\u305a\u306f\u3058\u3081\u306b\u3001FHIR content resources\u3068ID\u30ea\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u6c7a\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002 \u3069\u306e FHIR content resources \u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f \u514d\u75ab\uff08immunization\uff09\u306e\u4f8b\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 1\u56de\u76ee\u306e\u63a5\u7a2e\u306b\u95a2\u3059\u308b\u8a73\u7d30\u60c5\u5831\uff08\u88fd\u54c1\u60c5\u5831\u3001\u63a5\u7a2e\u65e5\u3001\u63a5\u7a2e\u306e\u5b9f\u65bd\u8005\uff09\u3092\u6301\u3063\u305f Immunization 2\u56de\u76ee\u306e\u63a5\u7a2e\u306b\u95a2\u3059\u308b\u8a73\u7d30\u60c5\u5831\uff08\u88fd\u54c1\u60c5\u5831\u3001\u63a5\u7a2e\u65e5\u3001\u63a5\u7a2e\u306e\u5b9f\u65bd\u8005\uff09\u3092\u6301\u3063\u305f Immunization What FHIR identity resources do we need to bind the FHIR content resources to an external identity system? We might eventually define use-case-specific requirements, but we want to start with a recommended set of data elements for inclusion using the FHIR Patient resource. Resources MAY include an overall \"level of assurance\" indicating whether these demographic elements have been verified. \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9 \u691c\u8a3c\u8005\uff08Verifiers\uff09\u306fID\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3001\u691c\u8a3c\u76ee\u7684\u3067\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\u3089\u30c7\u30fc\u30bf\u306f\u76f4\u3061\u306b\u524a\u9664\u3059\u308b\u3079\u304d\u3067\u3059\u3002 \u691c\u8a3c\u8005\uff08Verifiers\uff09\u306fVC\u5185\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u691c\u8a3c\u8eca\u306e\u6301\u3064\u30ec\u30b3\u30fc\u30c9\u306b\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001VC\u5185\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002 W3C VC Data Model\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b \u00b6 SMART Health Card JWS\u304b\u3089W3C Verifiable Credential JSON-LD\u69cb\u6587 \u306b\u4e00\u81f4\u3059\u308b\u69cb\u9020\u3092\u4f5c\u308b\u305f\u3081\u306b\u3001\u6b21\u306e\u3053\u3068\u3092\u884c\u3044\u307e\u3059\u3002 JWS payload\u306e\u5727\u7e2e\u3092\u89e3\u9664\u3059\u308b .vc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\u3002 \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", { \"@vocab\": \"https://smarthealth.cards#\", \"fhirBundle\": { \"@id\": \"https://smarthealth.cards#fhirBundle\", \"@type\": \"@json\" } } ] .vc.type \u914d\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b: \"VerifiableCredential\" JWT\u306e\u30c7\u30b3\u30fc\u30c9\u30eb\u30fc\u30eb \u306b\u5f93\u3063\u3066payload\u3092\u51e6\u7406\u3059\u308b Health Card\u306e\u4f8b \u00b6 VC payload\u306e\u4f8b","title":"\u8a3c\u660e\u66f8\u306e\u30e2\u30c7\u30eb"},{"location":"credential-modeling/#fhir","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001 FHIR \u3067\u30e2\u30c7\u30eb\u5316\u3055\u308c\u305f\u533b\u7642\u60c5\u5831\u3092 W3C Verifiable Credentials \uff08VC\uff09\u57fa\u3065\u3044\u3066\u3069\u306e\u3088\u3046\u306b\u8868\u73fe\u3059\u308b\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002","title":"FHIR\u3067\u691c\u8a3c\u53ef\u80fd\u306a\u533b\u7642\u60c5\u5831"},{"location":"credential-modeling/#_1","text":"\u691c\u8a3c\u53ef\u80fd\u306a\u533b\u7642\u60c5\u5831\u3092\u63d0\u793a\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001\u307e\u305a\u306f\u3058\u3081\u306b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u7279\u6709\u306e\u6c7a\u5b9a\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u5408\u308f\u305b\u3066\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3055\u308c\u3066\u7dad\u6301\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3001\u4e00\u9023\u306e\u5fc5\u9808\u304a\u3088\u3073\u30aa\u30d7\u30b7\u30e7\u30f3\u306e FHIR content resources \uff08\u4f8b\uff1a Immunization \u3084 Observation \u306a\u3069\uff09\u3092\u6c7a\u3081\u308b \u3053\u308c\u3089\u306eFHIR content resources\u3092\u3001 FHIR identity resources \uff08\u4f8b\uff1a Patient \uff09\u3092\u7d4c\u7531\u3057\u3066\u3001\u500b\u4eba\u306e\u5916\u90e8\u306eID\u3068\u7d10\u4ed8\u3051\u308b\u65b9\u6cd5\u3092\u6c7a\u3081\u308b \u3053\u308c\u3089\u3092\u6c7a\u5b9a\u3059\u308c\u3070\u3001VC\u306f\u3001 credential subject \u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u69cb\u6210\u3067\u304d\u307e\u3059\u3002 credentialSubject \u306b\u4ee5\u4e0b\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u8981\u7d20\u3092\u6301\u305f\u305b\u308b fhirVersion : a string representation of the semantic FHIR version the content is represented in (e.g. 1.0.* for DSTU2, 4.0.* for R4, where * is a number, not a literal asterisk) fhirBundle : a FHIR Bundle resource of type \"collection\" that includes all required FHIR resources (content + identity resources) \"credentialSubject\" \u306epayload\u306f\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002 { \"...\" , \"fhirVersion\" : \"4.0.1\" , \"fhirBundle\" : { \"resourceType\" : \"Bundle\" , \"type\" : \"collection\" , \"entry\" : [ \"...\" ] } \u4ee5\u4e0b\u3067\u306fHealth Card\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u3044\u307e\u3059\u304c\u3001FHIR\u304b\u3089VC\u3092\u69cb\u7bc9\u3059\u308b\u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u4ed6\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3082\u9069\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5b9a\u7fa9"},{"location":"credential-modeling/#health-card","text":"\u300cHealth Card\u300d\u306f\u30011\u3064\u306e\u72ec\u7acb\u3057\u305f\u30c8\u30d4\u30c3\u30af\u306b\u95a2\u3059\u308b\u7d50\u679c\u3092\u4f1d\u9054\u3059\u308bVC\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u3001\u30ef\u30af\u30c1\u30f3\u63a5\u7a2e\u306e\u8a73\u7d30\u304c\u8a18\u9332\u3055\u308c\u305f COVID-19\u306e\u514d\u75ab\u30ab\u30fc\u30c9 \u3067\u3059\u3002\u4ed6\u306e\u30ab\u30fc\u30c9\u3068\u3057\u3066\u306f\u3001\u305f\u3068\u3048\u3070\u3001COVID-19\u306eRT-PCR\u30c6\u30b9\u30c8\u306e\u8a73\u7d30\u3001COVID-19\u306e\u8a3a\u65ad\u7d50\u679c\u3001TDAP\u30ef\u30af\u30c1\u30f3\u306a\u3069\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u307e\u305a\u306f\u3058\u3081\u306b\u3001FHIR content resources\u3068ID\u30ea\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u6c7a\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002 \u3069\u306e FHIR content resources \u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f \u514d\u75ab\uff08immunization\uff09\u306e\u4f8b\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 1\u56de\u76ee\u306e\u63a5\u7a2e\u306b\u95a2\u3059\u308b\u8a73\u7d30\u60c5\u5831\uff08\u88fd\u54c1\u60c5\u5831\u3001\u63a5\u7a2e\u65e5\u3001\u63a5\u7a2e\u306e\u5b9f\u65bd\u8005\uff09\u3092\u6301\u3063\u305f Immunization 2\u56de\u76ee\u306e\u63a5\u7a2e\u306b\u95a2\u3059\u308b\u8a73\u7d30\u60c5\u5831\uff08\u88fd\u54c1\u60c5\u5831\u3001\u63a5\u7a2e\u65e5\u3001\u63a5\u7a2e\u306e\u5b9f\u65bd\u8005\uff09\u3092\u6301\u3063\u305f Immunization What FHIR identity resources do we need to bind the FHIR content resources to an external identity system? We might eventually define use-case-specific requirements, but we want to start with a recommended set of data elements for inclusion using the FHIR Patient resource. Resources MAY include an overall \"level of assurance\" indicating whether these demographic elements have been verified. \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9 \u691c\u8a3c\u8005\uff08Verifiers\uff09\u306fID\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3001\u691c\u8a3c\u76ee\u7684\u3067\u5fc5\u8981\u306a\u304f\u306a\u3063\u305f\u3089\u30c7\u30fc\u30bf\u306f\u76f4\u3061\u306b\u524a\u9664\u3059\u308b\u3079\u304d\u3067\u3059\u3002 \u691c\u8a3c\u8005\uff08Verifiers\uff09\u306fVC\u5185\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u691c\u8a3c\u8eca\u306e\u6301\u3064\u30ec\u30b3\u30fc\u30c9\u306b\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001VC\u5185\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u3002","title":"\u300cHealth Card\u300d\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b"},{"location":"credential-modeling/#w3c-vc-data-model","text":"SMART Health Card JWS\u304b\u3089W3C Verifiable Credential JSON-LD\u69cb\u6587 \u306b\u4e00\u81f4\u3059\u308b\u69cb\u9020\u3092\u4f5c\u308b\u305f\u3081\u306b\u3001\u6b21\u306e\u3053\u3068\u3092\u884c\u3044\u307e\u3059\u3002 JWS payload\u306e\u5727\u7e2e\u3092\u89e3\u9664\u3059\u308b .vc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\u3002 \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", { \"@vocab\": \"https://smarthealth.cards#\", \"fhirBundle\": { \"@id\": \"https://smarthealth.cards#fhirBundle\", \"@type\": \"@json\" } } ] .vc.type \u914d\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b: \"VerifiableCredential\" JWT\u306e\u30c7\u30b3\u30fc\u30c9\u30eb\u30fc\u30eb \u306b\u5f93\u3063\u3066payload\u3092\u51e6\u7406\u3059\u308b","title":"W3C VC Data Model\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b"},{"location":"credential-modeling/#health-card_1","text":"VC payload\u306e\u4f8b","title":"Health Card\u306e\u4f8b"},{"location":"ial/","text":"Defining URL https://smarthealth.cards/ial Version 1.0 License https://creativecommons.org/licenses/by/4.0/ This code system defines levels of identity assurance, based on NIST 800-63-3 . These codes may be used by Issuers of SMART Health Cards to record if/how a patient's identity was verified at the point of care. For example, if a patient showed their driver's license to verify their name and date of birth when getting a vaccination, this would correspond to IAL1.4 . The following codes are included in this code system: Code Display IAL1 Name and birth date were self-asserted. IAL1.2 An unspecified ID was used to verify name and birth date. IAL1.4 A government-issued photo ID was used to verify name and birth date. IAL2 Either remote or in-person identity proofing is required. IAL2 requires identifying attributes to have been verified in person or remotely using, at a minimum, the procedures given in NIST Special Publication 800-63A . IAL3 In-person identity proofing is required. Identifying attributes must be verified by an authorized CSP representative through examination of physical documentation as described in NIST Special Publication 800-63A . For IAL1.4 , in the US, \"government-issued photo ID\" may include IDs such as a US state-issued driver's license, a US nationally-issued ID like a US passport, or a foreign passport.","title":"Code System: Identity Assurance Level"},{"location":"vocabulary/","text":"\u691c\u8a3c\u53ef\u80fd\u306a\u8a3c\u660e\u66f8\uff08Verifiable Credential\u3001VC\uff09\u306e\u7a2e\u985e \u00b6 https://smarthealth.cards#health-card : \u300cHealth Card\u300d\uff08\u4f8b\uff1a\u5bfe\u8c61\u8005\u306eID\u306b\u7d10\u4ed8\u3044\u305f\u533b\u7642\u30c7\u30fc\u30bf\uff09\u3092\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fVC \u3088\u308a\u8a73\u7d30\u306a\u30b5\u30d6\u30bf\u30a4\u30d7 \u00b6 https://smarthealth.cards#covid19 : COVID-19\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305f\u8a2d\u8a08\u3055\u308c\u305fHealth Card https://smarthealth.cards#immunization : \u514d\u75ab\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fHealth Card https://smarthealth.cards#laboratory : \u691c\u67fb\u7d50\u679c\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fHealth Card","title":"\u8a3c\u660e\u66f8\u306e\u30bf\u30a4\u30d7"},{"location":"vocabulary/#verifiable-credentialvc","text":"https://smarthealth.cards#health-card : \u300cHealth Card\u300d\uff08\u4f8b\uff1a\u5bfe\u8c61\u8005\u306eID\u306b\u7d10\u4ed8\u3044\u305f\u533b\u7642\u30c7\u30fc\u30bf\uff09\u3092\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fVC","title":"\u691c\u8a3c\u53ef\u80fd\u306a\u8a3c\u660e\u66f8\uff08Verifiable Credential\u3001VC\uff09\u306e\u7a2e\u985e"},{"location":"vocabulary/#_1","text":"https://smarthealth.cards#covid19 : COVID-19\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305f\u8a2d\u8a08\u3055\u308c\u305fHealth Card https://smarthealth.cards#immunization : \u514d\u75ab\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fHealth Card https://smarthealth.cards#laboratory : \u691c\u67fb\u7d50\u679c\u306b\u3064\u3044\u3066\u4f1d\u642c\u3059\u308b\u305f\u3081\u306b\u30c7\u30b6\u30a4\u30f3\u3055\u308c\u305fHealth Card","title":"\u3088\u308a\u8a73\u7d30\u306a\u30b5\u30d6\u30bf\u30a4\u30d7"},{"location":"examples/","text":"Example Resources \u00b6 Example 0 \u00b6 example-00-a-fhirBundle.json example-00-b-jws-payload-expanded.json example-00-c-jws-payload-minified.json example-00-d-jws.txt example-00-e-file.smart-health-card example-00-f-qr-code-numeric-value-0.txt example-00-g-qr-code-0.svg Example 1 \u00b6 example-01-a-fhirBundle.json example-01-b-jws-payload-expanded.json example-01-c-jws-payload-minified.json example-01-d-jws.txt example-01-e-file.smart-health-card example-01-f-qr-code-numeric-value-0.txt example-01-g-qr-code-0.svg Example 2 \u00b6 example-02-a-fhirBundle.json example-02-b-jws-payload-expanded.json example-02-c-jws-payload-minified.json example-02-d-jws.txt example-02-e-file.smart-health-card example-02-f-qr-code-numeric-value-0.txt example-02-f-qr-code-numeric-value-1.txt example-02-f-qr-code-numeric-value-2.txt example-02-g-qr-code-0.svg example-02-g-qr-code-1.svg example-02-g-qr-code-2.svg","title":"\u5b9f\u88c5\u4f8b"},{"location":"examples/#example-resources","text":"","title":"Example Resources"},{"location":"examples/#example-0","text":"example-00-a-fhirBundle.json example-00-b-jws-payload-expanded.json example-00-c-jws-payload-minified.json example-00-d-jws.txt example-00-e-file.smart-health-card example-00-f-qr-code-numeric-value-0.txt example-00-g-qr-code-0.svg","title":"Example 0"},{"location":"examples/#example-1","text":"example-01-a-fhirBundle.json example-01-b-jws-payload-expanded.json example-01-c-jws-payload-minified.json example-01-d-jws.txt example-01-e-file.smart-health-card example-01-f-qr-code-numeric-value-0.txt example-01-g-qr-code-0.svg","title":"Example 1"},{"location":"examples/#example-2","text":"example-02-a-fhirBundle.json example-02-b-jws-payload-expanded.json example-02-c-jws-payload-minified.json example-02-d-jws.txt example-02-e-file.smart-health-card example-02-f-qr-code-numeric-value-0.txt example-02-f-qr-code-numeric-value-1.txt example-02-f-qr-code-numeric-value-2.txt example-02-g-qr-code-0.svg example-02-g-qr-code-1.svg example-02-g-qr-code-2.svg","title":"Example 2"}]}